// ðŸ§ª ExercÃ­cio 1 â€“ Clone profundo parcial com spread
// VocÃª recebeu um objeto de usuÃ¡rio, mas precisa fazer uma cÃ³pia dele, alterando apenas o nome. Use o spread para isso.

// const usuario = {
//   nome: "JoÃ£o",
//   idade: 30,
//   endereco: {
//     cidade: "SÃ£o Paulo",
//     estado: "SP"
//   }
// };

// const novoUsuario = { ...usuario, nome: 'Pedro'  }

// console.log(novoUsuario)

// Crie uma cÃ³pia de `usuario` com o nome "Pedro".
// // Dica: o spread nÃ£o faz cÃ³pia profunda no objeto aninhado.
// _______________________________________________________________________________________________________________

// ðŸ§ª ExercÃ­cio 2 â€“ FunÃ§Ã£o com parÃ¢metro rest
// Crie uma funÃ§Ã£o somaTudo que receba uma quantidade variÃ¡vel de nÃºmeros e retorne a soma total.

// function somaTudo(...numeros) {
//     return numeros.reduce((acc, num) => acc + num) }

// // console.log(somaTudo(1, 2, 3, 4))
// console.log(somaTudo(10, 20));
// _______________________________________________________________________________________________________________

// ðŸ§ª ExercÃ­cio 3 â€“ Separar o primeiro item do restante
// VocÃª tem um array de requisiÃ§Ãµes. Pegue a primeira requisiÃ§Ã£o e coloque o resto em outro array.

// const requisicoes = ["GET /", "POST /login", "GET /users", "DELETE /logout"];

// const [requisicaoGet, ...resto] = requisicoes

// console.log(requisicaoGet);
// console.log(resto);

// Resultado esperado:
// primeiro: "GET /"
// restantes: ["POST /login", "GET /users", "DELETE /logout"]
// _______________________________________________________________________________________________________________

// ðŸ§ª ExercÃ­cio 4 â€“ Merge de objetos com spread
// VocÃª recebe um configPadrao e um configUsuario, e precisa gerar um configFinal onde o usuÃ¡rio pode sobrescrever valores.

// const configPadrao = {
//   modo: "light",
//   idioma: "pt-BR",
//   logado: false
// };

// const configUsuario = {
//   modo: "dark",
//   logado: true
// };

// const configFinal = {
//     ...configPadrao,
//     ...configUsuario
// };

// console.log(configFinal)

// Use spread para gerar o configFinal
// Resultado esperado:
// { modo: "dark", idioma: "pt-BR", logado: true }
// _______________________________________________________________________________________________________________

// ðŸ§ª ExercÃ­cio 5 â€“ Rest em destructuring
// VocÃª recebe um objeto de dados de um banco e quer extrair apenas o campo senha, armazenando o resto em outro objeto.


// const dados = {
//   id: 1,
//   nome: "Alice",
//   email: "alice@email.com",
//   senha: "123456"
// };

// const {senha, ...resto} = dados;

// console.log(`Senha: ${senha}`);
// console.log(dados);

// Resultado esperado:
// senha: "123456"
// restantes: { id: 1, nome: "Alice", email: "alice@email.com" }

// _______________________________________________________________________________________________________________
// ðŸ§ª ExercÃ­cio 6 â€“ Spread para concatenar arrays de dados
// Imagine que vocÃª estÃ¡ lidando com duas pÃ¡ginas de resultados vindas de uma API paginada. Use spread para juntar tudo.

const pagina1 = [{ id: 1 }, { id: 2 }];
const pagina2 = [{ id: 3 }, { id: 4 }];

const organizaTudo = [
    ...pagina1,
    ...pagina2
];

console.log(organizaTudo)


// Resultado esperado: [{ id: 1 }, { id: 2 }, { id: 3 }, { id: 4 }]