// // ########## EXERC√çCIOS SOBRE FILTER ##########

// // üß™ Exerc√≠cio 1 ‚Äì Filtrar n√∫meros pares
// // Dado um array de n√∫meros, retorne apenas os n√∫meros pares.

// const numeros1 = [1, 2, 3, 4, 5, 6];

// // Sua l√≥gica aqui...

// const numerosPares = numeros1.filter(num => num % 2 === 0);

// console.log("Exerc√≠cio 1:", numerosPares);


// // üß™ Exerc√≠cio 2 ‚Äì Filtrar palavras curtas
// // Filtrar palavras com 4 letras ou menos.

// const palavras2 = ["sol", "chuva", "nuvem", "ar", "vento"];

// // Sua l√≥gica aqui...

// const palavrasCurtas = palavras2.filter(palavra => palavra.length <= 4);
// console.log("Exerc√≠cio 2:", palavrasCurtas);


// // üß™ Exerc√≠cio 3 ‚Äì Filtrar usu√°rios ativos
// // Filtrar apenas os usu√°rios com ativo: true.

// const usuarios3 = [
//   { nome: "Pedro", ativo: true },
//   { nome: "Ana", ativo: false },
//   { nome: "Jo√£o", ativo: true },
//   { nome: "Aline", ativo: true},
// ];

// // Sua l√≥gica aqui...

// const usuariosAtivos = usuarios3.filter( usuario => usuario.ativo === true);
// console.log("Exerc√≠cio 3:", usuariosAtivos);

// // üß™ Exerc√≠cio 4 ‚Äì Filtrar n√∫meros maiores que a m√©dia
// // Filtrar os n√∫meros maiores que a m√©dia do array.

// const numeros4 = [10, 20, 30, 40, 50];

// const mediaNumeros = numeros4.reduce((num, acc) => (acc += num)) / numeros4.length;

// const numMaiorMedia = numeros4.filter(media => media > mediaNumeros);

// // Sua l√≥gica aqui...
// console.log("Exerc√≠cio 4:", numMaiorMedia);


// // üß™ Exerc√≠cio 5 ‚Äì Filtrar palavras que come√ßam com "a" ou "A"

// const palavras5 = ["Abacate", "banana", "amora", "Laranja", "Ameixa"];

// // Sua l√≥gica aqui...

// const primeiraLetra = palavras5.filter( palavra => palavra.charAt(0) === 'a' || palavra.charAt(0) === 'A');
// console.log("Exerc√≠cio 5:",primeiraLetra);


// // üß™ Exerc√≠cio 6 ‚Äì Filtrar n√∫meros √∫nicos (sem repeti√ß√µes)
// // Dado um array com n√∫meros repetidos, filtre apenas os que aparecem uma √∫nica vez.

// const numeros6 = [1, 2, 2, 3, 4, 4, 5];

// // Sua l√≥gica aqui...

// const semRepeticao = numeros6.filter((num, _, arr) => {
//     return arr.indexOf(num) === arr.lastIndexOf(num);
// })
// console.log("Exerc√≠cio 6:", semRepeticao /* resultado */);

// // ########## EXERC√çCIOS SOBRE REDUCE ##########

// // üßÆ Exerc√≠cio 1 ‚Äì Soma total dos n√∫meros
// // Some todos os valores do array

// const numeros7 = [1, 2, 3, 4, 5];

// // Sua l√≥gica aqui...

// const somaValores = numeros7.reduce((acc, num) => acc += num, 0)
// console.log("Exerc√≠cio 1:", somaValores);

// // üßÆ Exerc√≠cio 2 ‚Äì Produto de todos os n√∫meros
// // Multiplique todos os valores do array

// const numeros8 = [2, 3, 4];

// const multiplique = numeros8.reduce((acc, num) => acc * num)

// // Sua l√≥gica aqui...
// console.log("Exerc√≠cio 2:", multiplique);

// // üßÆ Exerc√≠cio 3 ‚Äì Concatenar palavras em uma frase
// // Junte todas as palavras formando uma frase

// const palavras9 = ["A", "enfermagem", "transforma", "vidas"];

// // Sua l√≥gica aqui...

// const juntaFrase = palavras9.reduce((frase, palavra) => frase + " " + palavra);
// console.log("Exerc√≠cio 3:", juntaFrase);


// // üßÆ Exerc√≠cio 4 ‚Äì Contar quantas vezes cada n√∫mero aparece
// // Retorne um objeto com a contagem de cada n√∫mero

// const numeros10 = [1, 2, 2, 3, 3, 3];

// // Sua l√≥gica aqui...

// const numUnicos = numeros10.reduce((acc, num) => {
//   acc[num] = (acc[num] || 0) + 1;
//   return acc
// }, {})

// console.log("Exerc√≠cio 4:", numUnicos);


// // üßÆ Exerc√≠cio 5 ‚Äì Soma dos valores de um array de objetos
// // Somar os valores da chave "horas" de cada item

// const estagios5 = [
//   { aluno: "Pedro", horas: 6 },
//   { aluno: "Ana", horas: 8 },
//   { aluno: "Jo√£o", horas: 4 },
// ];

// // Sua l√≥gica aqui...
// const horasEstagio = estagios5.reduce((acumulador, horas) => {
//   return acumulador += horas.horas;
// }, 0)
// console.log("Exerc√≠cio 5:", horasEstagio);


// // üßÆ Exerc√≠cio 6 ‚Äì Encontrar o maior n√∫mero do array
// // Use reduce para retornar o maior valor

// // const numeros11 = [10, 25, 7, 99, 34];
// const numeros11 = [99, 5, 359, 70, 358];

// // Sua l√≥gica aqui...

// const maiorValor = numeros11.reduce((acc, valor) => {
//   if(valor > acc) {
//     return valor
//   }
//   return acc;
// }, numeros11[0])
  

// console.log("Exerc√≠cio 6:", maiorValor);

// ########## EXERC√çCIOS SOBRE FOREACH ##########

// üîÅ Exerc√≠cio 1 ‚Äì Imprimir cada nome com sauda√ß√£o
// Dado um array de nomes, imprima "Ol√°, [nome]!" para cada um usando forEach().

const nomes1 = ["Pedro", "Ana", "Jo√£o", "Aline"];

// Sua l√≥gica aqui...
nomes1.forEach(nome => {
  console.log(`Ol√°, ${nome}!`);
})


// üîÅ Exerc√≠cio 2 ‚Äì Somar todos os n√∫meros usando forEach
// Some todos os valores do array e imprima o total no final.

const numeros2 = [10, 20, 30, 40];
let total2 = 0;

// Sua l√≥gica aqui...

numeros2.forEach( num => total2 += num);
console.log("Exerc√≠cio 2:", total2);

// üîÅ Exerc√≠cio 3 ‚Äì Contar quantas palavras t√™m mais de 5 letras
// Use forEach para contar palavras com mais de 5 letras.

const palavras3 = ["computador", "c√£o", "janela", "ar", "teclado"];
let contagem3 = 0;

// Sua l√≥gica aqui...

palavras3.forEach( palavra => {
  if(palavra.length > 5) {
    contagem3 ++;
  }
})
console.log("Exerc√≠cio 3:", contagem3);


// üîÅ Exerc√≠cio 4 ‚Äì Criar um novo array com o dobro de cada n√∫mero
// Use forEach para preencher um novo array com o dobro dos valores.

const numeros12 = [1, 2, 3, 4, 5];
const dobro4 = [];

// Sua l√≥gica aqui...

numeros12.forEach( n => {
  dobro4.push(n * 2)
})
console.log("Exerc√≠cio 4:", dobro4);


// üîÅ Exerc√≠cio 5 ‚Äì Marcar usu√°rios como verificados
// Adicione a propriedade "verificado: true" para cada objeto do array.

const usuarios5 = [
  { nome: "Pedro" },
  { nome: "Ana" },
  { nome: "Jo√£o" },
];

usuarios5.forEach( user => {
  user.verificado = true
})

// Sua l√≥gica aqui...

console.log("Exerc√≠cio 5:", usuarios5);


// üîÅ Exerc√≠cio 6 ‚Äì Contar quantos n√∫meros s√£o pares
// Use forEach para contar quantos n√∫meros s√£o pares no array.

const numeros13 = [3, 6, 8, 1, 5, 10, 12];
let pares6 = 0;

// Sua l√≥gica aqui...

numeros13.forEach( numbers => {
  if(numbers % 2 === 0) {
    pares6++;
  }
})

console.log("Exerc√≠cio 6:", pares6);
